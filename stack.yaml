heat_template_version: 2013-05-23

description: |
  Deploys a salt-master and a number of salt-minions.
  One minion will be an haproxy node.
  One minion will be a database node.
  A variable number of minions will be web nodes each with
  apache2, php5, drupal, memcached, php-apc, lsyncd, csync2, and xinetd.
  Floating ips will be assigned to the salt-master and haproxy nodes.

parameter_groups:
  - parameters:
    - keyname
    - image
    - floating-network-id
    - minion-count
    - flavor

parameters:

  keyname:
    type: string
    label: Salt-Master Key Name
    description: Name of the key used to ssh into the Salt-Master.

  image:
    type: string
    label: Image Name
    description: Name of the existing image to use for every virtual machine created by this stack. The image should have the heat-config and heat-config-script files included.

  floating-network-id:
    type: string
    label: External Network UUID
    description: UUID of the external network. The private network created by this stack will route to this network. Any floating IP addresses needed by this stack will also route to this network.

  minion-count:
    type: number
    default: 2
    label: Number of Web Servers
    description: Number of web application servers.

  flavor:
    type: string
    label: Flavor
    description: Flavor (size) for all virtual machines in this stack.
    default: m1.small

resources:

  # Random string to aid in naming things.
  stack-string:
    type: OS::Heat::RandomString
    properties:
      length: 6
      sequence: lettersdigits

  # Will be used to generate a random password
  # 32 characters long consisting of alpha numeric characters
  secret:
    type: OS::Heat::RandomString
    properties:
      length: 32
      sequence: lettersdigits

  # Security group
  secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: drupal-$stackstr-secgroup
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - protocol: tcp
          port_range_min: 4505
          port_range_max: 4606
        - protocol: tcp
          port_range_min: 30865
          port_range_max: 30865

  # Keypair for communicating between nodes within the stack.
  # Will allow minions to ssh into the master and vice versa.
  coms:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name:
        str_replace:
          template: drupal-$stackstr-coms
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value

  # Private network for this stack
  net:
    type: OS::Neutron::Net

  # Private subnet for this stack
  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id:
        get_resource: net
      cidr: 10.20.20.0/24
      dns_nameservers:
        - 8.8.8.8
        - 4.2.2.2

  # Routes the private network to the external network.
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network:
          get_param: floating-network-id

  # Router interface
  interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id:
        get_resource: router
      subnet_id:
        get_resource: subnet

  # One floating ip for the salt-master node
  master-ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id:
        get_param: floating-network-id

  # One port for the salt-master node
  master-port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: net
      security_groups:
        - get_resource: secgroup

  galera:
    type: OS::Heat::ResourceGroup
    depends_on: net
    properties:
      count: 1
      resource_def:
        type: Db::Galera
        properties:
          keyname:
            get_param: keyname
          image:
            get_param: image
          floating-network-id:
            get_param: floating-network-id
          db-username: drupal-stack
          db-user-password:
            get_attr:
              - secret
              - value
          db-remotehost: '%'
          apps-network:
            get_resource: net
          database: drupal-db
          flavor:
            get_param: flavor

  # Software configuration script for the salt-master node
  # Installs salt-master, sets permission on some personality files
  # and uses git to clone any provided state/formula repos
  config-salt-master:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: public_key
        - name: state_repos
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-salt-master
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0

        chmod -R 0600 ${logdir}
        chmod 0700 /root/.ssh/coms_rsa
        chmod 0600 /srv/pillar/drupal.sls

        # Add coms from minions to master
        echo "$public_key" >> /root/.ssh/authorized_keys

        # Install salt-master and git
        echo "Install Salt Master"
        add-apt-repository ppa:saltstack/salt
        apt-get update
        apt-get install -y git salt-master

        mkdir -p /srv/salt
        echo -e 'file_roots:\n  base:\n    - /srv/salt' >> /etc/salt/master

        # Clone state/formula repos in state root directory
        cd /srv/salt
        while read -r line
        do
            if [ -n "$line" ]; then
                git clone $line
            fi
        done <<< "$state_repos"

        mv /srv/salt/sync-formula /srv/salt/sync
        mv /srv/salt/drupal-formula /srv/salt/drupal

        # Finally - Restart salt service
        service salt-master restart

        touch ${prefix}.ran

  # Software configuration for salt minion
  # Installs salt-minion, sets up authentication from minion to master,
  # and sets permissions of any personality files.
  config-salt-minion:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: public_key
        - name: master
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-salt-minion
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0

        chmod -R 0600 ${logdir}
        chmod 0700 /root/.ssh/coms_rsa

        # Add coms from minions to master
        echo "$public_key" >> /root/.ssh/authorized_keys

        # Install salt minion
        add-apt-repository ppa:saltstack/salt
        apt-get update
        apt-get install -y salt-minion
        echo master: $master >> /etc/salt/minion

        service salt-minion restart

        ssh-keyscan -H $master >> /root/.ssh/known_hosts

        MASTER_PKI_PATH="/etc/salt/pki/master/minions/"
        MASTER_PKI_PATH_PRE="/etc/salt/pki/master/minions_pre/"
        MINION_PKI_PATH="/etc/salt/pki/minion/minion.pub"
        HOSTNAME="$(python  -c 'import socket; print socket.getfqdn()')"

        while [ ! -s ${MINION_PKI_PATH} ]; do
            echo "Waiting for ${MINION_PKI_PATH} to have non-zero content."
            sleep 2
        done

        cp $MINION_PKI_PATH /root/minion_key

        scp -i /root/.ssh/coms_rsa /root/minion_key root@$master:/tmp/$HOSTNAME

        ssh -i /root/.ssh/coms_rsa root@$master "mv /tmp/$HOSTNAME $MASTER_PKI_PATH$HOSTNAME; chmod 700 $MASTER_PKI_PATH$HOSTNAME; rm $MASTER_PKI_PATH_PRE$HOSTNAME"

        service salt-minion restart
        rm /root/minion_key
        rm /root/.ssh/coms_rsa
        touch ${prefix}.ran

  # Software deployment for salt-master. Deploys the salt-master softrware
  # configuration.
  # Also lists the git repos necessary to make the drupal stack work.
  deploy-salt-master:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        public_key:
          get_attr:
            - coms
            - public_key
        state_repos: |
          https://github.com/rcbops/sync-formula.git
          https://github.com/rcbops/drupal-formula.git
          https://github.com/rcbops/base-hardening-formula.git
      config:
        get_resource: config-salt-master
      server:
        get_resource: master

  # The salt master instance
  # Should have one floating ip
  master:
    type: OS::Nova::Server
    depends_on: interface
    properties:
      key_name:
        get_param: keyname
      image:
        get_param: image
      flavor:
        get_param: flavor
      name:
        str_replace:
          template: drupal-$stackstr-master
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      personality:

        # Private key for ssh'ing into minions
        /root/.ssh/coms_rsa:
          get_attr:
            - coms
            - private_key

        # The top.sls file for salt states.
        # Dictates which minions get which formulas
        /srv/salt/top.sls: |
          base:
            'roles:db':
              - match: grain
              - drupal.db
            'roles:web':
              - match: grain
              - drupal.web
              - sync
            'roles:haproxy':
              - match: grain
              - drupal.haproxy

        # The top.sls file for salt pillars.
        # Dictates which minions get which pillars.
        /srv/pillar/top.sls: |
          base:
            '*':
              - app
            'roles:web':
              - match: grain
              - drupal
            'roles:db':
              - match: grain
              - drupal

        # The app pillar. Describe interfaces and salt-mine functions.
        /srv/pillar/app.sls: |
          interfaces:
            private: eth0
            public: eth0
          mine_functions:
            network.ip_addrs: [eth0]
            network.interfaces: []
            grains.get: ['host']
          mine_interval: 1
          sync:
            group: drupal
            includes:
              - /var/www
          user-ports:
            ssh:
              chain: INPUT
              proto: tcp
              dport: 22
            salt-master:
              chain: INPUT
              proto: tcp
              dport: 4505
            salt-minion:
              chain: INPUT
              proto: tcp
              dport: 4506
            write:
              chain: INPUT
              proto: tcp
              dport: 13306
            read:
              chain: INPUT
              proto: tcp
              dport: 3306
            http:
              chain: INPUT
              proto: tcp
              dport: 80
            https:
              chain: INPUT
              proto: tcp
              dport: 443
            lsyncd:
              chain: INPUT
              proto: tcp
              dport: 30865

        # The drupal.sls pillar. Describe database account info for drupal
        # This file should have its permissions changed during software
        # Configuration
        /srv/pillar/drupal.sls:
          str_replace:
            template: |
              drupal:
                db:
                  name: drupal-db
                  user: drupal-stack
                  password: $pw
                  write:
                    port: 13306
                  read:
                    port: 3306
            params:
              $pw:
                get_attr:
                  - secret
                  - value

      # Get access from the master-port
      networks:
        - port:
            get_resource: master-port

      # Using SoftwareConfigs - This needs to be set to SOFTWARE_CONFIG
      user_data_format: SOFTWARE_CONFIG

  # Associate the master floating ip to the master port
  master-floating-ip-ass:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id:
        get_resource: master-ip
      port_id:
        get_resource: master-port

  # Deploys a group of (vms + software deployment).
  # This group the varying number of web servers.
  # Each instance in this group will be an instance with salt-minion
  # installed and will have the salt role of 'web'
  minion-group-web:
    type: OS::Heat::ResourceGroup
    depends_on: deploy-salt-master
    properties:
      count:
        get_param: minion-count
      resource_def:
        type: Salt::Minion
        properties:
          flavor:
            get_param: flavor
          stack-prefix:
            str_replace:
              template: drupal-$stackstr-web
              params:
                $stackstr:
                  get_attr:
                    - stack-string
                    - value
          private_key:
            get_attr:
              - coms
              - private_key
          public_key:
            get_attr:
              - coms
              - public_key
          image:
            get_param: image
          network:
            get_resource: net
          master:
            get_attr:
              - master
              - first_address
          minion-config:
            get_resource: config-salt-minion
          minion-roles: "web"
          security-group:
            get_resource: secgroup

  # Floating ip for haproxy node
  minion-haproxy-ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id:
        get_param: floating-network-id

  # Port for haproxy node
  minion-haproxy-port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: net
      security_groups:
        - get_resource: secgroup

  # haproxy minion
  minion-haproxy:
    type: OS::Nova::Server
    depends_on: interface
    properties:
      flavor:
        get_param: flavor
      image:
        get_param: image
      name:
        str_replace:
          template: drupal-$stackstr-haproxy
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      personality:

        # Private key for node to node communication
        /root/.ssh/coms_rsa:
          get_attr:
            - coms
            - private_key

        # Set the salt role to haproxy
        /etc/salt/grains: |
          roles:
            - haproxy

      networks:
        - port:
            get_resource: minion-haproxy-port

      # Needs to be SOFTWARE_CONFIG when using SoftwareConfigs
      user_data_format: SOFTWARE_CONFIG

  # Associate haproxy floating ip to the port
  minion-haproxy-floating-ip-ass:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id:
        get_resource: minion-haproxy-ip
      port_id:
        get_resource: minion-haproxy-port

  # Deploys the salt-minion software config to the haproxy node.
  deploy-haproxy:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy-salt-master
    properties:
      input_values:
        public_key:
          get_attr:
            - coms
            - public_key
        master:
          get_attr:
            - master
            - first_address
      config:
        get_resource: config-salt-minion
      server:
        get_resource: minion-haproxy

  # SoftwareConfig that is to run on master.
  # Executes a salt state.highstate on all attached minions.
  config-deploy:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: db
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-deploy
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0
        cd /srv/salt/sync/files/csync2
        bash generate_key.sh
        echo "    host: $db" >> /srv/pillar/drupal.sls
        salt '*' saltutil.refresh_pillar
        salt '*' mine.update
        salt '*' state.highstate
        salt -G roles:web service.start lsyncd
        salt -t 90 -l debug '*' state.sls base-hardening-formula.base-hardening-formula
        touch ${prefix}.ran

  # Deploys the the deploy softwareconfig
  # All minions should be spun up and running salt-minion
  # before executing this deployment.
  # Note: each minion can run state.highstate independently of the others
  # as long as the others have updated the salt mine. That is why we wait
  # for all minions to be up and running.
  deploy:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config-deploy
      server:
        get_resource: master
      input_values:
        db:
          get_attr:
            - galera
            - haproxy-ip
            - 0
    depends_on:
      - deploy-salt-master
      - minion-group-web
      - deploy-haproxy
      - galera

outputs:
  master-ip:
    description: SSH here first to get to the other VMs
    value:
      get_attr:
        - master-ip
        - floating_ip_address

  minion-web-ips:
    description: IPs of the web VMs
    value:
      get_attr:
        - minion-group-web
        - minion-ip

  minion-haproxy-ip:
    description: IP of the haproxy VM
    value:
      get_attr:
        - minion-haproxy-ip
        - floating_ip_address

  finish-drupal-url:
    description: Go here to complete the drupal installation. (Choose locale settings, etc.)
    value:
      str_replace:
        template: http://$haproxyip/install.php
        params:
          $haproxyip:
            get_attr:
              - minion-haproxy-ip
              - floating_ip_address

  # Uncomment the stdout's and stderr's if problems are occuring.
  #master-stdout:
  #  value:
  #    get_attr:
  #     - deploy-salt-master
  #     - deploy_stdout
  #master-stderr:
  #  value:
  #    get_attr:
  #      - deploy-salt-master
  #      - deploy_stderr

  #minion-web-stdout:
  #  value:
  #    get_attr:
  #      - minion-group-web
  #      - minion-stdout
  #minion-web-stderr:
  #  value:
  #    get_attr:
  #      - minion-group-web
  #      - minion-stderr
